#!/usr/bin/env node

const envPath = process.env.NODE_ENV === 'e2e_test' ? '.e2e_test.env' : '.env'
require('dotenv').config({ path: envPath })

const http     = require('http')
const mongoose = require('mongoose')
const app      = require('../app')

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '5005')
app.set('port', port)
const server = http.createServer(app)

mongoose.connect(process.env.DB_URI, {
  useNewUrlParser    : true,
  useUnifiedTopology : true
}).then(() => {
  console.log('DB connected')
  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)
}).catch((err) => {
  console.error(err)
})

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const portNumber = parseInt(val, 10)

  if (Number.isNaN(portNumber)) {
    // named pipe
    return val
  }

  if (portNumber >= 0) {
    // port number
    return portNumber
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(`${bind} requires elevated privileges`)
    process.exit(1)
    break
  case 'EADDRINUSE':
    console.error(`${bind} is already in use`)
    process.exit(1)
    break
  default:
    throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`
  const listening = `Listening on ${bind}`
  console.log(listening)
}

module.exports = app
